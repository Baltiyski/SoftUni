/*
 * You will be given an integer N representing the number of elements to push onto the stack, 
 * an integer S representing the number of elements to pop from the stack and finally an integer X, 
 * an element that you should check whether is present in the stack. If it is, 
 * print true on the console. 
 * If it’s not, print the smallest element currently present in the stack.
 */
package _StacksAndQueues.HomeProblems;

import java.util.ArrayDeque;
import java.util.Collections;
import java.util.Scanner;

public class _02BasicStackOperations {
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		String[] input = scanner.nextLine().split("\\s+");
		
		int elementsPop = Integer.parseInt(input[1]);
		int numberInStack = Integer.parseInt(input[2]);
		
		String[] stackElements = scanner.nextLine().split("\\s+");
		ArrayDeque<String> stack = new ArrayDeque<>();
		Collections.addAll(stack, stackElements);
		
		while (elementsPop > 0) {
			stack.removeLast();
			elementsPop--;
		}
		
		//test if the number is in Stack
		int theSmallesElement = Integer.MAX_VALUE;
		boolean hasTheNumber = false;
		
		for (int i = 1; i <= stack.size(); i++) {
			int number = Integer.parseInt(stack.pop());
			if (number == numberInStack) {
				hasTheNumber =  true;
			}
			if (number < theSmallesElement) {
				theSmallesElement = number;
			}
		}
		
		//print True if the number is in the stack - else print the smallest number in the stack
		if (hasTheNumber) {
			System.out.println("true");
		}
		else {
			System.out.println(theSmallesElement);
		}
	}
}
