package _StacksAndQueues.HomeProblems;

import java.util.ArrayDeque;
import java.util.Scanner;

public class _08BalancedParantheses {
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		char[] parenthesesArray = scanner.nextLine().toCharArray();
		
		boolean isParentheses = true;
		if (parenthesesArray.length % 2 != 0) {
			System.out.println("NO");
		} else {
			ArrayDeque<Character> parenthese = new ArrayDeque<>();
			
			for (int i = 0; i < parenthesesArray.length; i++) {
				parenthese.add(parenthesesArray[i]);
			}
					
			char firstElement;
			char lasElement;
			
			char bracked1 = '{';
			char bracked2 = '}';
			char bracked3 = '(';
			char bracked4 = ')';
			char bracked5 = '[';
			char bracked6 = ']';
			
			for (int i = 0; i < parenthese.size(); i++) {
				firstElement = parenthese.poll();
				lasElement = parenthese.pollLast();
				
				if ((firstElement == bracked1 && lasElement == bracked2) || (firstElement == bracked3 && lasElement == bracked4) || (firstElement == bracked5 && lasElement == bracked6)) {
					isParentheses = true;
				} else {
					isParentheses = false;
					break;
				}
			}
		}
		
		
		if (!isParentheses) {
			System.out.println("NO");
		} else {
			System.out.println("YES");
		}
		
	}
}
